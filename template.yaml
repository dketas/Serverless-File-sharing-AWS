AWSTemplateFormatVersion: '2010-09-09'
Description: Serverless File Sharing System Full Infrastructure

Parameters:
  LambdaCodeS3Bucket:
    Type: String
    Description: "S3 Bucket hosting the Lambda code zips"
  LambdaCodeS3Key:
    Type: String
    Description: "S3 Key for the zipped Lambda code"

Resources:

  # S3 Bucket for storing user files
  FileBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: sfss-bucket
      AccessControl: Private

  # IAM Role for Lambda Functions with basic execution and S3 access
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SFSSLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SFSSLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::sfss-bucket
                  - !Sub arn:aws:s3:::sfss-bucket/*

  # AWS Lambda functions for file operations

  UploadLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: uploadFileFunction
      Handler: upload_file_lambda.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Code:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: !Ref LambdaCodeS3Key
      Environment:
        Variables:
          BUCKET_NAME: sfss-bucket

  ListFilesLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: listFilesFunction
      Handler: list_files_lambda.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Code:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: !Ref LambdaCodeS3Key
      Environment:
        Variables:
          BUCKET_NAME: sfss-bucket

  DownloadLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: downloadFileFunction
      Handler: download_file_lambda.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Code:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: !Ref LambdaCodeS3Key
      Environment:
        Variables:
          BUCKET_NAME: sfss-bucket

  DeleteLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: deleteFileFunction
      Handler: delete_file_lambda.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Code:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: !Ref LambdaCodeS3Key
      Environment:
        Variables:
          BUCKET_NAME: sfss-bucket

  # API Gateway REST API with methods linked to Lambda functions

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ServerlessFileSharingAPI

  ApiGatewayResourceRoot:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: files
      RestApiId: !Ref ApiGatewayRestApi

  # POST /files/upload
  ApiGatewayMethodUpload:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResourceRoot
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiCognitoAuthorizer
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - {
              Region: !Ref "AWS::Region",
              LambdaArn: !GetAtt UploadLambdaFunction.Arn
            }
      MethodResponses: []

  # GET /files/list
  ApiGatewayMethodList:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResourceRoot
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiCognitoAuthorizer
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - {
              Region: !Ref "AWS::Region",
              LambdaArn: !GetAtt ListFilesLambdaFunction.Arn
            }
      MethodResponses: []

  # GET /files/download
  ApiGatewayMethodDownload:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResourceRoot
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiCognitoAuthorizer
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - {
              Region: !Ref "AWS::Region",
              LambdaArn: !GetAtt DownloadLambdaFunction.Arn
            }
      MethodResponses: []

  # DELETE /files/delete
  ApiGatewayMethodDelete:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResourceRoot
      HttpMethod: DELETE
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiCognitoAuthorizer
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - {
              Region: !Ref "AWS::Region",
              LambdaArn: !GetAtt DeleteLambdaFunction.Arn
            }
      MethodResponses: []

  # Cognito User Pool for authentication
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: ServerlessFileSharingUserPool
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: false
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: ServerlessFileSharingUserPoolClient
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
        - USER_PASSWORD_AUTH

  ApiCognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoAuthorizer
      Type: COGNITO_USER_POOLS
      RestApiId: !Ref ApiGatewayRestApi
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - !GetAtt UserPool.Arn

  # Permission to allow API Gateway invoke Lambda
  UploadLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UploadLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/files

  ListLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ListFilesLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/GET/files

  DownloadLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DownloadLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/GET/files

  DeleteLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DeleteLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/DELETE/files

Outputs:
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool

  UserPoolClientId:
    Description: Cognito App Client ID
    Value: !Ref UserPoolClient

  ApiUrl:
    Description: API Gateway base URL
    Value: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/files

